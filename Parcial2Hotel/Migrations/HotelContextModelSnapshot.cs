// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResHotel.Data;

namespace ResHotel.Migrations
{
    [DbContext(typeof(HotelContext))]
    partial class HotelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("ResHotel.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BookedEndDate");

                    b.Property<DateTime>("BookedStartDate");

                    b.Property<string>("BookingComments");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("DateBookingMade");

                    b.Property<string>("TimeBookingMade");

                    b.Property<int>("TotalPaymentDueAmount");

                    b.Property<DateTime>("TotalPaymentDueDate");

                    b.Property<DateTime>("TotalPaymentMadeOn");

                    b.HasKey("BookingID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("ResHotel.Models.BookingRoom", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BookingID1");

                    b.Property<int>("GuestID");

                    b.Property<int>("RoomID");

                    b.HasKey("BookingID");

                    b.HasIndex("BookingID1");

                    b.HasIndex("GuestID");

                    b.HasIndex("RoomID");

                    b.ToTable("BookingRoom");
                });

            modelBuilder.Entity("ResHotel.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerAddressCountry");

                    b.Property<string>("CustomerAddressPostalCode");

                    b.Property<string>("CustomerAddressStreet");

                    b.Property<string>("CustomerAddressTown");

                    b.Property<string>("CustomerCustomEmail");

                    b.Property<DateTime>("CustomerDOB");

                    b.Property<string>("CustomerForenames")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CustomerHomePhone");

                    b.Property<string>("CustomerMobilPhone");

                    b.Property<string>("CustomerSurnames")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CustomerTitle");

                    b.Property<string>("CustomerWorkPhone");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ResHotel.Models.FacilitieList", b =>
                {
                    b.Property<int>("FacilityID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FacilityDesc")
                        .IsRequired();

                    b.HasKey("FacilityID");

                    b.ToTable("FacilitieList");
                });

            modelBuilder.Entity("ResHotel.Models.Guest", b =>
                {
                    b.Property<int>("GuestID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GuestAddressCountry");

                    b.Property<string>("GuestAddressPostaleCode");

                    b.Property<string>("GuestAddressStreet");

                    b.Property<string>("GuestAddressTown");

                    b.Property<string>("GuestContactPhone");

                    b.Property<DateTime>("GuestDOB");

                    b.Property<string>("GuestForenames")
                        .IsRequired();

                    b.Property<string>("GuestSurnames")
                        .IsRequired();

                    b.Property<string>("GuestTitle");

                    b.HasKey("GuestID");

                    b.ToTable("Guest");
                });

            modelBuilder.Entity("ResHotel.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookingID");

                    b.Property<int>("CustomerID");

                    b.Property<int>("PaymentAmount");

                    b.Property<string>("PaymentComments");

                    b.Property<int>("PaymentMethodID");

                    b.HasKey("PaymentID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("ResHotel.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PaymentMethods")
                        .IsRequired();

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("ResHotel.Models.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(100);

                    b.Property<string>("Floor")
                        .HasMaxLength(100);

                    b.Property<int>("RoomBandID");

                    b.Property<int>("RoomPriceID");

                    b.Property<int>("RoomTypeID");

                    b.HasKey("RoomID");

                    b.HasIndex("RoomBandID");

                    b.HasIndex("RoomPriceID");

                    b.HasIndex("RoomTypeID");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("ResHotel.Models.RoomBand", b =>
                {
                    b.Property<int>("RoomBandID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BandDesc");

                    b.HasKey("RoomBandID");

                    b.ToTable("RoomBand");
                });

            modelBuilder.Entity("ResHotel.Models.RoomFacilitieList", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FacilityDetails");

                    b.Property<int>("FacilityID");

                    b.Property<int?>("RoomID1");

                    b.HasKey("RoomID");

                    b.HasIndex("FacilityID");

                    b.HasIndex("RoomID1");

                    b.ToTable("RoomFacilitieList");
                });

            modelBuilder.Entity("ResHotel.Models.RoomPrice", b =>
                {
                    b.Property<int>("RoomPriceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoomPrices");

                    b.HasKey("RoomPriceID");

                    b.ToTable("RoomPrice");
                });

            modelBuilder.Entity("ResHotel.Models.RoomType", b =>
                {
                    b.Property<int>("RoomTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoomTypes");

                    b.HasKey("RoomTypeID");

                    b.ToTable("RoomType");
                });

            modelBuilder.Entity("ResHotel.Models.Booking", b =>
                {
                    b.HasOne("ResHotel.Models.Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ResHotel.Models.BookingRoom", b =>
                {
                    b.HasOne("ResHotel.Models.Booking")
                        .WithMany("BookingRooms")
                        .HasForeignKey("BookingID1");

                    b.HasOne("ResHotel.Models.Guest")
                        .WithMany("BookingRooms")
                        .HasForeignKey("GuestID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResHotel.Models.Room")
                        .WithMany("BookingRooms")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ResHotel.Models.Payment", b =>
                {
                    b.HasOne("ResHotel.Models.Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResHotel.Models.Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResHotel.Models.PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ResHotel.Models.Room", b =>
                {
                    b.HasOne("ResHotel.Models.RoomBand")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomBandID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResHotel.Models.RoomPrice")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomPriceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResHotel.Models.RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ResHotel.Models.RoomFacilitieList", b =>
                {
                    b.HasOne("ResHotel.Models.FacilitieList")
                        .WithMany("RoomFacilitieLists")
                        .HasForeignKey("FacilityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResHotel.Models.Room")
                        .WithMany("RoomFacilitieLists")
                        .HasForeignKey("RoomID1");
                });
#pragma warning restore 612, 618
        }
    }
}
